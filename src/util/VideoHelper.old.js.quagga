import Quagga from 'quagga'

let scoped_callback = () => { console.log("not yet defined") }
let already_initialized = false

const init = async () => {
	// const devices = await Quagga.CameraAccess.enumerateVideoDevices()
	// console.log(devices)
	if (already_initialized) return

		Quagga.init({
			inputStream: {
				type: 'LiveStream',
				constraints: {
					facingMode: 'environment'	// or 'user'
				}
			},
			locator: {
				patchSize: 'medium',
				halfSample: true
			},
			numOfWorkers: 2,
			frequency: 10,
			decoder: {
				readers: [
					'ean_reader',
				]
			},
			locate: true
		}, err => {
			if (err) {
				alert(err);
				return console.log(err);
			}
		})
		Quagga.onDetected(result => {
			console.log(result)
			scoped_callback(result.codeResult.code)
		})
	// Quagga.init({
	// 		inputStream: {
	// 			type : "LiveStream",
	// 			constraints: {
	// 				width: {min: 640},
	// 				height: {min: 480},
	// 				facingMode: "environment",
	// 				aspectRatio: {min: 1, max: 2},
	// 				deviceId: devices[0].deviceId
	// 			},
	// 			target: document.querySelector('video')
	// 		},
	// 	// inputStream : {
	// 	// 	name : "Live",
	// 	// 	type : "LiveStream",
	// 	// },
	// 	decoder : { readers : ["ean_reader"] },
	// 	numOfWorkers: window.navigator.hardwareConcurrency | 1,
	// 	locate: true,
	// 	locator: {
	// 		patchSize: "medium",
	// 		halfSample: true
	// 	},
	// 	frequency: 10
	// }, (err) => {
	// 	if (err) {
	// 		console.log(err);
	// 		return
	// 	}
	// 	console.log("Initialization finished. Ready to start")
	// })
	already_initialized = true
}

const VideoHelper = {
	scanItem: async (callback) => {
		await init()
		scoped_callback = params => {
			callback(params)
			Quagga.stop()
		}
		Quagga.start()
	}
}
export default VideoHelper